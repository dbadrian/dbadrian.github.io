<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>empyreum. - Programming</title><link href="http://dbadrian.github.io/" rel="alternate"></link><link href="http://dbadrian.github.io/feeds/programming.atom.xml" rel="self"></link><id>http://dbadrian.github.io/</id><updated>2014-05-01T10:35:00+02:00</updated><entry><title>First Programming Article</title><link href="http://dbadrian.github.io/first-programming-article.html" rel="alternate"></link><published>2014-05-01T10:35:00+02:00</published><updated>2014-05-01T10:35:00+02:00</updated><author><name>David B. Adrian</name></author><id>tag:dbadrian.github.io,2014-05-01:/first-programming-article.html</id><summary type="html">&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin dignissim lorem consequat, malesuada dolor quis, gravida est. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Maecenas vitae pulvinar nisl. Vestibulum blandit risus enim, in pharetra felis rutrum sit amet.&lt;/p&gt;
&lt;p&gt;Let's test some syntax highlighting:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#ifndef OPTICAL_FLOW_FILTERFACTORY_H â€¦&lt;/pre&gt;</summary><content type="html">&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin dignissim lorem consequat, malesuada dolor quis, gravida est. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Maecenas vitae pulvinar nisl. Vestibulum blandit risus enim, in pharetra felis rutrum sit amet.&lt;/p&gt;
&lt;p&gt;Let's test some syntax highlighting:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#ifndef OPTICAL_FLOW_FILTERFACTORY_H
#define OPTICAL_FLOW_FILTERFACTORY_H

#include "common.h"
#include "IFilterFactory.h"

class FilterFactory : public IFilterFactory {
public:
    FilterFactory(float t0, float tk, float tResolution, int xRange, int yRange);
    virtual void setFilterTransformer(FilterTransformT transform) override;
    virtual std::shared_ptr&amp;lt;Filter&amp;gt; createFilter(int angle) const override;

private:
    std::pair&amp;lt;float, float&amp;gt; rotate(int angle, const std::pair&amp;lt;float, float&amp;gt;&amp;amp; vec) const;
    float gaus(float sigma, float mu, float x) const;
    std::complex&amp;lt;float&amp;gt; spatial(float x, float y, float fx, float fy) const;
    float timeMono(float t) const;
    float timeBi(float t) const;

private:
    int t0_;
    int timeSpan_;
    float tResolution_;
    int xRange_;
    int yRange_;
    int xSize_;
    int ySize_;

private:
    FilterTransformT filterTransformer_;

    // filter parameters from paper
    float sigma;
    float s1;
    float s2;
    float mu_bi1;
    float sigma_bi1;
    float mu_bi2;
    float sigma_bi2;
    float mu_mono;
    float sigma_mono;
    std::pair&amp;lt;float, float&amp;gt; fxy;

    static const float PI_;
};


#endif //OPTICAL_FLOW_FILTERFACTORY_H
&lt;/pre&gt;
&lt;p&gt;Cool, ey?&lt;/p&gt;
</content><category term="ubuntu"></category><category term="kernel"></category></entry></feed>